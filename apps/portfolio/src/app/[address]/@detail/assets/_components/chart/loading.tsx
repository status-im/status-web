const Loading = () => {
  return (
    <div className="relative mt-4 flex h-[296px] w-full flex-col">
      <div className="absolute left-0 top-0 z-10 flex size-full max-h-[264px] flex-col-reverse items-start justify-between">
        {Array.from({ length: 7 }).map((_, index) => {
          return (
            <div
              key={index}
              className="flex w-full items-center justify-start gap-7"
            >
              {/* Dashed line for each value */}
              <div className="h-px w-full border-t border-dashed border-neutral-10" />

              <div className="flex animate-pulse">
                <div className="h-2 w-6 rounded-10 bg-neutral-20" />
              </div>
            </div>
          )
        })}
      </div>
      <div className="relative flex h-full w-[calc(100%-60px)] flex-col">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          height="100%"
          width="100%"
          viewBox="0 0 572 160"
          className="max-h-[264px] animate-pulse"
          preserveAspectRatio="none"
        >
          <path
            fill="#E7EAEE"
            d="m40.669 58.571.415-.278-.004-.007-.411.285Zm39.029 14.286.292.406-.292-.406Zm39.669 0 .292-.406-.292.406Zm39.029-14.286-.413-.282-.002.004.415.278Zm39.669-14.285.292-.406-.003-.002-.289.408Zm78.698 42.857.292-.406-.292.406Zm39.669 0-.292-.406.292.406Zm39.669 14.286.415-.279-.005-.007-.41.286Zm39.029 14.285-.292-.405.292.405Zm78.698-42.857-.292-.406a.393.393 0 0 0-.041.033l.333.373Zm39.349 0-.296.404.007.004.289-.408Zm39.989-14.286.41.286-.41-.286Zm20.245-28.286a.5.5 0 0 0-.822-.57l.822.57Zm-56.557 45.178.289-.407-.289.407Zm27.995-4.911.41.285-.41-.285ZM505.38 67.15l.296-.404-.296.404Zm-36.729 10.33-.333-.372.333.373Zm-43.174 1.233.454.21-.454-.21Zm-8.309 17.954-.454-.21.454.21Zm-53.396 16.181.415-.279-.415.279Zm28.29 5.075-.292-.405.292.405Zm-72.309-33.172-.292-.406.292.406Zm28.118 4.823.411-.285-.411.285Zm-62.962 3.436-.293.405.293-.405Zm23.377 0-.292-.406.292.406Zm-53.557-25.063.457-.204-.457.204Zm6.565 8.054-.293.406.293-.406Zm-53.692-24.846-.292.405.292-.405Zm-41.169-4.35.412.282-.412-.282ZM111.221 66.99l.292-.405-.292.405Zm135.543-16.829-.457.205.457-.205ZM1.292 44.691 4.614 42.3l-.585-.811L.708 43.88l.584.811Zm30.737 2.311 8.23 11.855.82-.57-8.229-11.855-.821.57Zm8.225 11.848 7.671 11.42.83-.558-7.671-11.42-.83.558Zm36.669 16.622 3.067-2.21-.584-.81-3.068 2.209.585.811Zm3.067-2.21 8.146-5.866-.584-.811-8.146 5.866.584.812Zm30.939-5.866 8.146 5.867.584-.812-8.146-5.866-.584.81Zm8.146 5.867 3.067 2.21.584-.812-3.067-2.21-.584.812Zm32.064-2.994 7.672-11.419-.83-.557-7.672 11.419.83.557Zm7.67-11.416 8.036-11.766-.825-.564-8.037 11.766.826.564Zm35.415-16.677 3.552 2.518.578-.816-3.551-2.517-.579.815Zm3.549 2.515 9.537 6.87.584-.812-9.537-6.869-.584.811Zm48.534 5.675 7.966 17.786.913-.409-7.966-17.786-.913.409Zm14.694 26.04 15.47 11.143.584-.812-15.469-11.141-.585.81Zm15.47 11.143 8.145 5.866.585-.81-8.146-5.868-.584.812Zm32.107 5.866 8.146-5.866-.584-.812-8.146 5.867.584.811Zm8.146-5.866 3.321-2.393-.584-.811-3.321 2.392.584.812Zm30.737 2.31 8.229 11.855.821-.571-8.229-11.854-.821.57Zm8.225 11.848 7.671 11.42.83-.558-7.671-11.419-.83.557Zm36.669 16.622 3.067-2.209-.584-.811-3.068 2.209.585.811Zm3.067-2.209 15.577-11.219-.585-.811-15.576 11.219.584.811Zm22.2-19.243 8.309-17.954-.908-.42-8.309 17.954.908.42Zm51.362-19.023 5.177-4.624-.666-.746-5.177 4.624.666.745Zm5.136-4.591 8.05-5.798-.584-.812-8.05 5.798.584.812Zm30.965-5.71 7.796 5.708.591-.807-7.796-5.708-.591.807Zm7.803 5.712 3.677 2.606.578-.815-3.677-2.607-.578.816Zm32.371-2.428 8.317-11.98-.821-.57-8.317 11.98.821.57Zm8.317-11.98 19.835-28.572-.822-.57-19.834 28.571.821.57ZM516.565 75.87c9.3 6.593 22.193 4.331 28.694-5.034l-.821-.57c-6.184 8.908-18.448 11.06-27.295 4.789l-.578.815Zm-34.395-8.406a19.5 19.5 0 0 1 22.915.088l.591-.807a20.5 20.5 0 0 0-24.09-.093l.584.812Zm-33.831 8.7c5.131 6.364 14.547 7.135 20.645 1.688l-.666-.745c-5.671 5.065-14.428 4.348-19.2-1.572l-.779.628Zm-22.408 2.758c4.138-8.94 16.225-10.429 22.408-2.759l.779-.628c-6.649-8.247-19.646-6.646-24.095 2.967l.908.42Zm-14.932 25.978a20.506 20.506 0 0 0 6.623-8.024l-.908-.42a19.497 19.497 0 0 1-6.3 7.633l.585.811Zm-47.642 8.226c6.46 9.615 19.598 11.972 28.998 5.202l-.585-.811c-8.941 6.44-21.438 4.197-27.583-4.949l-.83.558Zm-43.312-27.97c8.847-6.372 21.198-4.253 27.416 4.702l.821-.57c-6.536-9.415-19.521-11.642-28.821-4.944l.584.811Zm-35.429 8.258a20.5 20.5 0 0 0 23.962 0l-.584-.81a19.5 19.5 0 0 1-22.793 0l-.585.81Zm-30.343-25.263a20.511 20.511 0 0 0 6.728 8.255l.585-.811a19.497 19.497 0 0 1-6.4-7.853l-.913.409ZM207.31 51.56c5.885 4.239 14.101 2.83 18.237-3.128l-.822-.57c-3.816 5.498-11.4 6.799-16.831 2.887l-.584.811Zm-40.465-4.473c6.149-9.003 18.485-11.215 27.379-4.91l.579-.816c-9.351-6.628-22.319-4.302-28.783 5.162l.825.564Zm-44.703 28.385c9.4 6.77 22.538 4.413 28.997-5.203l-.83-.557c-6.144 9.146-18.641 11.388-27.583 4.949l-.584.811Zm-34.006-8.076a19.5 19.5 0 0 1 22.793 0l.584-.811a20.5 20.5 0 0 0-23.962 0l.585.81Zm-40.21 2.873c6.46 9.616 19.597 11.973 28.997 5.203l-.585-.811c-8.94 6.44-21.438 4.197-27.582-4.95l-.83.558Zm177.621-21.837c5.314-7.655 16.951-6.571 20.76 1.934l.913-.41c-4.127-9.214-16.737-10.389-22.495-2.094l.822.57ZM4.614 42.3c8.846-6.371 21.198-4.252 27.415 4.703l.821-.57c-6.536-9.415-19.52-11.643-28.82-4.944l.584.811Z"
          />

          <mask
            id="b"
            width="572"
            height="160"
            x="1"
            y="0"
            maskUnits="userSpaceOnUse"
            style={{ maskType: 'alpha' }}
          >
            <path fill="url(#a)" d="M1 0h572v160H1z" />
          </mask>
          <g mask="url(#b)">
            <path
              fill="#F0F2F5"
              d="m1 43.852 3.301-2.386c9.083-6.563 21.785-4.384 28.161 4.83l8.232 11.897 7.674 11.46C54.669 79.066 67.52 81.37 76.7 74.738l3.047-2.202 8.133-5.877a20 20 0 0 1 23.428 0l8.133 5.877 3.046 2.202c9.18 6.633 22.031 4.328 28.333-5.083l7.674-11.46 8.039-11.81c6.306-9.263 18.991-11.538 28.124-5.044l3.531 2.511 9.532 6.889c5.662 4.091 13.58 2.733 17.555-3.011 5.531-7.993 17.675-6.864 21.637 2.012l7.984 17.885a20.007 20.007 0 0 0 6.549 8.058l15.489 11.193 8.133 5.877a20 20 0 0 0 23.428 0l8.133-5.877 3.301-2.386c9.083-6.563 21.785-4.384 28.161 4.83l8.232 11.897 7.674 11.461c6.301 9.411 19.153 11.716 28.332 5.083l3.047-2.202 15.596-11.27a19.999 19.999 0 0 0 6.447-7.833l8.33-18.058c4.287-9.293 16.849-10.837 23.259-2.86 4.95 6.16 14.055 6.906 19.941 1.632l5.174-4.636 8.037-5.808a20 20 0 0 1 23.553.091l7.783 5.717 3.963 2.774c9.103 6.373 21.656 4.103 27.951-5.055L573.356 29.6v-.09L575.142 27l-1.786 2.599V160H1V43.852Z"
            />
          </g>
          <defs>
            <radialGradient
              id="a"
              cx="0"
              cy="0"
              r="1"
              gradientTransform="matrix(0 107.56 -285.643 0 286.643 52.44)"
              gradientUnits="userSpaceOnUse"
            >
              <stop stopColor="red" />
              <stop offset="1" stopColor="red" stopOpacity="0" />
            </radialGradient>
          </defs>
        </svg>
        <div className="absolute bottom-0 flex w-full justify-between">
          {Array.from({ length: 7 }).map((_, index) => {
            return (
              <div key={index} className="flex animate-pulse">
                <div className="h-2 w-6 rounded-10 bg-neutral-20" />
              </div>
            )
          })}
        </div>
      </div>
    </div>
  )
}

export { Loading }
